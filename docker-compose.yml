version: '3'

services:
    # django:
    #     # docker run --rm -it -p 8000:8000 django_simple /bin/sh
    #     # docker run --rm -it -p 8000:8000 django_simple bash        
        
    #     build:
    #         context: django
    #     container_name: django_simple
    #     # command: python manage.py runserver 0.0.0.0:8000
    #     # command: waitress-serve --listen=*:8000 --threads=8 project.wsgi:application        
    #     # command: gunicorn -w 8 -b 0.0.0.0:8000 project.asgi:application -k uvicorn.workers.UvicornWorker        
        
    #     # command: gunicorn -w 8 -b 0.0.0.0:8000 project.wsgi
    #     command: gunicorn -w 8 -b 0.0.0.0:8000 project.wsgi:application -k meinheld.gmeinheld.MeinheldWorker      
    #     image: django_simple
    #     # volumes:
    #     #     - ./app:/app
    #     ports:
    #         - "8000:8000"

    # redismaster1:
    #     image: jayjohnson/redis-clusterable
    #     container_name: "redismaster1"
    #     hostname: "redismaster1"
    #     environment:
    #         - NODESUPERVISORNAME=redis-master-1
    #         - REDISNODENAME=redismaster1
    #         - REDISNODEPORT=6379
    #         - REDISNODEREPLICAS=redismaster1:6379 redismaster2:6379 redismaster3:6379 redisreplica1:6379 redisreplica2:6379 redisreplica3:6379
    #     ports:
    #         - "6379:6379"
    #         - "16379:16379"
    #         - "26379:26379"
    #     cap_add:
    #         - ALL
    #         - NET_ADMIN
    #         - SYS_ADMIN

    # redismaster2:
    #     image: jayjohnson/redis-clusterable
    #     container_name: "redismaster2"
    #     hostname: "redismaster2"
    #     environment:
    #         - NODESUPERVISORNAME=redis-master-2
    #         - REDISNODENAME=redismaster2
    #         - REDISNODEPORT=6380
    #         - REDISNODEREPLICAS=redismaster1:6379 redismaster2:6379 redismaster3:6379 redisreplica1:6379 redisreplica2:6379 redisreplica3:6379
    #     ports:
    #         - "6380:6379"
    #         - "16380:16379"
    #         - "26380:26379"
    #     cap_add:
    #         - ALL
    #         - NET_ADMIN
    #         - SYS_ADMIN

    # redismaster3:
    #     image: jayjohnson/redis-clusterable
    #     container_name: "redismaster3"
    #     hostname: "redismaster3"
    #     environment:
    #         - NODESUPERVISORNAME=redis-master-3
    #         - REDISNODENAME=redismaster3
    #         - REDISNODEPORT=6381
    #         - REDISNODEREPLICAS=redismaster1:6379 redismaster2:6379 redismaster3:6379 redisreplica1:6379 redisreplica2:6379 redisreplica3:6379
    #     ports:
    #         - "6381:6379"
    #         - "16381:16379"
    #         - "26381:26379"
    #     cap_add:
    #         - ALL
    #         - NET_ADMIN
    #         - SYS_ADMIN

    # redisreplica1:
    #     image: jayjohnson/redis-clusterable
    #     container_name: "redisreplica1"
    #     hostname: "redisreplica1"
    #     environment:
    #         - NODESUPERVISORNAME=redis-replica-1
    #         - REDISNODENAME=redisreplica1
    #         - REDISNODEPORT=6382
    #         - REDISNODEREPLICAS=redismaster1:6379 redismaster2:6379 redismaster3:6379 redisreplica1:6379 redisreplica2:6379 redisreplica3:6379
    #     ports:
    #         - "6382:6379"
    #         - "16382:16379"
    #         - "26382:26379"
    #     cap_add:
    #         - ALL
    #         - NET_ADMIN
    #         - SYS_ADMIN

    # redisreplica2:
    #     image: jayjohnson/redis-clusterable
    #     container_name: "redisreplica2"
    #     hostname: "redisreplica2"
    #     environment:
    #         - NODESUPERVISORNAME=redis-replica-2
    #         - REDISNODENAME=redisreplica2
    #         - REDISNODEPORT=6381
    #         - REDISNODEREPLICAS=redismaster1:6379 redismaster2:6379 redismaster3:6379 redisreplica1:6379 redisreplica2:6379 redisreplica3:6379
    #     ports:
    #         - "6383:6379"
    #         - "16383:16379"
    #         - "26383:26379"
    #     cap_add:
    #         - ALL
    #         - NET_ADMIN
    #         - SYS_ADMIN

    # redisreplica3:
    #     image: jayjohnson/redis-clusterable
    #     container_name: "redisreplica3"
    #     hostname: "redisreplica3"
    #     environment:
    #         - NODESUPERVISORNAME=redis-replica-3
    #         - REDISNODENAME=redisreplica3
    #         - REDISNODEPORT=6381
    #         - REDISNODEREPLICAS=redismaster1:6379 redismaster2:6379 redismaster3:6379 redisreplica1:6379 redisreplica2:6379 redisreplica3:6379
    #     ports:
    #         - "6384:6379"
    #         - "16384:16379"
    #         - "26384:26379"
    #     cap_add:
    #         - ALL
    #         - NET_ADMIN
    #         - SYS_ADMIN
    

    # redis-node-0:
    #     &base_redis
    #     image: docker.io/bitnami/redis-cluster:6.2
    #     volumes:
    #         - redis-cluster_data-0:/bitnami/redis/data
    #         - /home/redis/config:/opt/bitnami/redis/etc/
    #     networks:
    #         - redis-cluster-network        
    #     environment:
    #         - 'ALLOW_EMPTY_PASSWORD=yes'
    #         - 'REDIS_PORT_NUMBER=6379'
    #         # - 'REDIS_PASSWORD=bitnami'
    #         - 'REDIS_NODES=redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-node-4 redis-node-5'
    #     ports:
    #         - "7000:6379"

    # redis-node-1:
    #     <<: *base_redis
    #     volumes:            
    #         - redis-cluster_data-1:/bitnami/redis/data  
    #         - /home/redis/config:/opt/bitnami/redis/etc/
    #     ports:
    #         - "7001:6379"            

    # redis-node-2:
    #     <<: *base_redis
    #     volumes:
    #         - redis-cluster_data-2:/bitnami/redis/data  
    #         - /home/redis/config:/opt/bitnami/redis/etc/
    #     ports:
    #         - "7002:6379"            

    # redis-node-3:
    #     <<: *base_redis
    #     volumes:
    #         - redis-cluster_data-3:/bitnami/redis/data  
    #         - /home/redis/config:/opt/bitnami/redis/etc/
    #     ports:
    #         - "7003:6379"

    # redis-node-4:
    #     <<: *base_redis
    #     volumes:
    #         - redis-cluster_data-4:/bitnami/redis/data  
    #         - /home/redis/config:/opt/bitnami/redis/etc/
    #     ports:
    #         - "7004:6379"                        

    # redis-node-5:
    #     image: docker.io/bitnami/redis-cluster:6.2
    #     volumes:
    #         - redis-cluster_data-5:/bitnami/redis/data
    #         - /home/redis/config:/opt/bitnami/redis/etc/
    #     depends_on:
    #         - redis-node-0
    #         - redis-node-1
    #         - redis-node-2
    #         - redis-node-3
    #         - redis-node-4
    #     ports:
    #         - "7005:6379"                        
    #     environment:
    #         # - 'REDIS_PASSWORD=bitnami'
    #         - 'ALLOW_EMPTY_PASSWORD=yes'
    #         # - 'REDISCLI_AUTH=bitnami'
    #         - 'REDIS_CLUSTER_REPLICAS=1'
    #         - 'REDIS_NODES=redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-node-4 redis-node-5'
    #         - 'REDIS_CLUSTER_CREATOR=yes'
    #         - 'REDIS_TLS_AUTH_CLIENTS=no'

    # redis_cluster:
    #     # image: bitnami/redis-cluster
    #     image: redis_cluster_image
    #     build:
    #         context: redis
    #     container_name: redis_cluster_jar
    #     # entrypoint: sleep infinity
    #     # entrypoint: bash "tail -f /dev/null"
    #     # command: bash -c "./start.sh && sleep infinity"
    #     command: bash -c "./start.sh && sleep 5 && yes yes | redis-cli --cluster create 127.0.0.1:7000 127.0.0.1:7001 127.0.0.1:7002 && sleep infinity"
    #     # command: bash -c "sleep infinity"
    #     # command: bash -c "redis-server /app/node_1/redis.conf && cd /app/node_2 && redis-server /app/node_2/redis.conf && cd /app/node_3 && redis-server /app/node_3/redis.conf"
    #     ports:
    #         - "7000:7000"
    #         - "7001:7001"
    #         - "7002:7002"


    # redis_cluster:
    #     # image: bitnami/redis-cluster
    #     image: redis_cluster_image
    #     build:
    #         context: redis
    #     container_name: redis_cluster_jar
    #     # entrypoint: sleep infinity
    #     # entrypoint: bash "tail -f /dev/null"
    #     # command: bash -c "./start.sh && sleep infinity"
    #     command: bash -c "./start.sh && sleep 5 && yes yes | redis-cli --cluster create 127.0.0.1:7000 127.0.0.1:7001 127.0.0.1:7002 && sleep infinity"
    #     # command: bash -c "sleep infinity"
    #     # command: bash -c "redis-server /app/node_1/redis.conf && cd /app/node_2 && redis-server /app/node_2/redis.conf && cd /app/node_3 && redis-server /app/node_3/redis.conf"
    #     ports:
    #         - "7000:7000"



    # redis_node_0:
    #     &base_redis
    #     image: redis_cluster_image        
    #     build:
    #         context: redis_cluster
    #     ports:
    #         - "7000:6379"  

    # redis_node_1:
    #     <<: *base_redis
    #     ports:
    #         - "7001:6379"
            
    # redis_node_2:
    #     <<: *base_redis
    #     ports:
    #         - "7002:6379"  

    # redis_node_3:
    #     <<: *base_redis
    #     ports:
    #         - "7003:6379"

    # redis_node_4:
    #     <<: *base_redis
    #     ports:
    #         - "7004:6379"              

    # redis_cluster:
    #     # image: bitnami/redis-cluster
    #     image: redis_cluster_image
    #     build:
    #         context: redis_cluster
    #     # command: bash -c "./start3_nodes.sh && sleep infinity"
    #     command: bash -c "./start6_nodes.sh && sleep infinity"
    #     # command: bash -c "sleep infinity"
    #     ports:
    #         - "7005:6379"    
    #     depends_on:
    #         - redis_node_0
    #         - redis_node_1                   
    #         - redis_node_2                   
    #         - redis_node_3                   
    #         - redis_node_4                   

    # redis_tests:
    #     build:
    #         context: redis/tests
    #     image: redis_tests_image
    #     container_name: redis_tests_jar
    #     command: bash -c "sleep infinity"



    redis:
        image: redis:6.0.16
        container_name: redis_jar
        ports:
            - "6379:6379"      
            
    # redis_1:
    #     image: redis:6.0.16
    #     container_name: redis_jar1
    #     ports:
    #         - "6380:6379"    
            
    # redis_2:
    #     image: redis:6.0.16
    #     container_name: redis_jar2
    #     ports:
    #         - "6381:6379"                

    django_channels:
        &base_django
        # docker run --rm -it -p 8000:8000 django_simple /bin/sh
        # docker run --rm -it -p 8000:8000 django_simple bash        
        
        build:
            context: django_channels
        # container_name: django_channels_jar
        # command: python manage.py runserver 0.0.0.0:8000

        # command: daphne -b 0.0.0.0 -p 8000 prototype_project.asgi:application
        # command: uvicorn --workers=1 --port 8000 --host 0.0.0.0 prototype_project.asgi:application
        # command: uvicorn --port 8000 --host 0.0.0.0 prototype_project.asgi:application
        # command: gunicorn -w 8 -b 0.0.0.0:8000 --preload prototype_project.asgi:application -k uvicorn.workers.UvicornWorker

        command: gunicorn -w 1 -b 0.0.0.0:8000 prototype_project.wsgi:application -k meinheld.gmeinheld.MeinheldWorker      
        image: django_channels_image
        # volumes:
        #     - ./app:/app  
        # ports:
        #     - "8000:8000"          
        environment:
            # - REDIS_HOST=redismaster1
            # - REDIS_HOST=redisreplica3
            # - REDIS_HOST=redis-node-0
            # - REDIS_HOST=redis_cluster
            # - REDIS_PORT=7000
            - REDIS_HOST=redis
            - REDIS_PORT=6379
        # service deployment
        # depends_on:
        #     # - redis
        #     - redis_cluster
        #     # - redis-node-0
        #     # - redismaster1
        deploy:
            mode: replicated
            replicas: 4

    django_channels_1:
        <<: *base_django
        image: django_channels
    django_channels_2:
        <<: *base_django
        image: django_channels
    django_channels_3:
        <<: *base_django 
        image: django_channels
        # ports:
        #     - "8000:8000"          

    # django_channels_4:
    #     <<: *base_django
    # django_channels_5:
    #     <<: *base_django
    # django_channels_6:
    #     <<: *base_django
    # django_channels_7:
    #     <<: *base_django
                        
    apache:
        build:
            context: apache
        # command: /bin/sh "/usr/local/apache2/bin/httpd"
        # command: tail -f > /dev/null
        # command: ./bin/httpd
        hostname: apache
        # image: httpd:alpine
        # volumes:
        #     - /.pentest/apache:/etc/apache/conf.d        
        ports:
            - "8000:8000"

    nginx:        
        # build:
        #     context: django_channels    
        # image: nginx_image
        image: nginx:latest
        container_name: nginx_balancer
        working_dir: /etc/nginx/conf.d
        # command: bash
        stdin_open: true
        tty: true
        volumes:
            - /.pentest/nginx:/etc/nginx/conf.d
            # - ./nginx:/etc/nginx/conf.d
            # - ./nginx/nginx.conf:/etc/nginx/conf.d/nginx.conf
        ports:
            - "8008:8000"
    
    # django_bjoern:
    #     container_name: django_bjoern        
    #     command: python wsgi_bjoern.py
    #     image: django_simple
    #     ports:
    #         - "8000:8000"
    # fastapi:
    #     build:
    #         context: fastapi
    #     container_name: fastapi_guvicorn        
    #     command: gunicorn main:app -w 8 --reuse-port --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:8008
    #     image: fastapi_guvicorn
    #     ports:
    #         - "8008:8008"
    # hunt_http:
    #     # docker run --rm -it -p 8000:8000 hunt-http bash

    #     build:
    #         context: hunt-http    
    #     container_name: hunt_app                
    #     command: bash -c "dub run -v"
    #     image: hunt_project
    #     ports:
    #         - "15672:8080"            
    # hunt:
    #     # docker run --rm -it -p 8000:8000 hunt_project bash

    #     build:
    #         context: hunt        
    #     container_name: hunt_app        
    #     command: bash
    #     # command: bash -c "git clone https://github.com/huntlabs/hunt-skeleton.git app && cd app "
    #     # command: bash -c "dub run -v"
    #     image: hunt_project
    #     ports:
    #         - "9001:8080"
    # vibe_d:
    #     # docker run --rm -it -p 8000:8000 vibe_d_app bash

    #     build:
    #         context: vibed        
    #     container_name: vibe_d_app  
    #     # command: dub run --compiler=ldc2 --build=release      
    #     command: dub run --build=release 
    #     # command: bash -c "git clone https://github.com/huntlabs/hunt-skeleton.git app && cd app "
    #     # command: bash -c "dub run -v"
    #     image: vibe_d_app
    #     ports:
    #         - "9000:8088"
    # express:
    #     build:
    #         context: express
    #     container_name: express_app        
    #     # command: node index.js
    #     # command: pm2 start index.js -i max
    #     command: pm2-runtime start index.js -i max
    #     # command: node cluster.js
    #     image: express_project
    #     ports:
    #         - "9000:3000"
    # # fastify_cluster:
    # #     build:
    # #         context: fastify-cluster
    # #     container_name: fastify_cluster_app        
    # #     command: npm start
    # #     image: fastify_cluster_project
    # #     ports:
    # #         - "9001:7300"       
    # fastify:
    #     build:
    #         context: fastify
    #     container_name: fastify_app        
    #     command: npm run begin
    #     image: fastify_project
    #     ports:
    #         - "9001:3000"        

    # wrk:        
    #     image: skandyla/wrk
    #     container_name: wrk_test
    #     # command: bash
    #     stdin_open: true
    #     tty: true        
    #     ports:
    #         - "8888:8888"


# volumes:
#     redis-cluster_data-0:
#         driver: local
#     redis-cluster_data-1:
#         driver: local
#     redis-cluster_data-2:
#         driver: local
#     redis-cluster_data-3:
#         driver: local
#     redis-cluster_data-4:
#         driver: local
#     redis-cluster_data-5:
#         driver: local    

# networks:
# #Internal-only network for proper nginx proxying and ssh
#     redis-cluster-network:
#         driver: bridge
#         internal: true