version: '3'

services:
    django:
        # docker run --rm -it -p 8000:8000 django_simple /bin/sh
        # docker run --rm -it -p 8000:8000 django_simple bash        
        
        build:
            context: django
        container_name: django_simple
        # command: python manage.py runserver 0.0.0.0:8000
        # command: waitress-serve --listen=*:8000 --threads=8 project.wsgi:application        
        # command: gunicorn -w 8 -b 0.0.0.0:8000 project.asgi:application -k uvicorn.workers.UvicornWorker        
        
        # command: gunicorn -w 8 -b 0.0.0.0:8000 project.wsgi
        command: gunicorn -w 8 -b 0.0.0.0:8000 project.wsgi:application -k meinheld.gmeinheld.MeinheldWorker
        image: django_simple
        # volumes:
        #     - ./app:/app
        ports:
            - "8000:8000"
        # deploy:            
        #     mode: replicated
        #     replicas: 2   
    # django_bjoern:
    #     container_name: django_bjoern        
    #     command: python wsgi_bjoern.py
    #     image: django_simple
    #     ports:
    #         - "8000:8000"

    fastapi:
        build:
            context: fastapi
        container_name: fastapi_guvicorn        
        command: gunicorn main:app -w 8 --reuse-port --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:8008
        image: fastapi_guvicorn
        ports:
            - "8008:8008"

    # hunt_http:
    #     # docker run --rm -it -p 8000:8000 hunt-http bash

    #     build:
    #         context: hunt-http    
    #     container_name: hunt_app                
    #     command: bash -c "dub run -v"
    #     image: hunt_project
    #     ports:
    #         - "15672:8080"            
    # hunt:
    #     # docker run --rm -it -p 8000:8000 hunt_project bash

    #     build:
    #         context: hunt        
    #     container_name: hunt_app        
    #     command: bash
    #     # command: bash -c "git clone https://github.com/huntlabs/hunt-skeleton.git app && cd app "
    #     # command: bash -c "dub run -v"
    #     image: hunt_project
    #     ports:
    #         - "9001:8080"

    vibe_d:
        # docker run --rm -it -p 8000:8000 vibe_d_app bash

        build:
            context: vibed
            # dockerfile: vibed/Dockerfile-dmd-ubuntu
        container_name: vibe_d_app  
        # command: dub run --compiler=ldc2 --build=release      
        # command: dub run --build=release
        # command: /bin/sh "source ~/dlang/dmd-2.098.1/activate && tail -f /dev/null"
        # command: /bin/sh "tail -f /dev/null"
        # command: bash -c "tail -f /dev/null"

        command: bash -c "./vibe_d"
        # command: bash -c "dub run -v"
        image: vibe_d_app
        ports:
            - "7000:8088"
        # deploy:            
        #     mode: replicated
        #     replicas: 4       

    # vibe_d:
    #     image: simdnyan/vibed    
    #     container_name: vibe_d_app          
    #     # command: dub run --build=release
    #     # command: dub run --build=release 
    #     # entrypoint: bash -c "wait infinity"
    #     entrypoint: bash -c "tail -f /dev/null"
    #     # command: /bin/sh "wait infinity"
    #     ports:
    #         - "9000:8080"    

    express:
        build:
            context: express
        container_name: express_app        
        # command: node index.js
        # command: pm2 start index.js -i max
        command: pm2-runtime start index.js -i max
        # command: node cluster.js
        image: express_project
        ports:
            - "9000:3000"

    fastify_cluster:
        build:
            context: fastify-cluster
        container_name: fastify_cluster_app        
        command: npm start
        image: fastify_cluster_project
        ports:
            - "9001:7300"       
    # fastify:
    #     build:
    #         context: fastify
    #     container_name: fastify_app        
    #     command: npm run begin
    #     image: fastify_project
    #     ports:
    #         - "9001:3000"        

    wrk:        
        image: skandyla/wrk
        container_name: wrk_test
        # command: bash
        stdin_open: true
        tty: true        
        ports:
            - "8888:8888"

