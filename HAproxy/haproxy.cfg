global
    # maxconn 10000
    # nbthread 4

    # # option                  httplog
    # # option                  dontlognull
    # # option http-server-close
    # # option forwardfor       except 127.0.0.0/8
    # # option                  redispatch
    # # retries                 3
    # # timeout http-request    10s
    # # timeout queue           1m
    # # timeout connect         10s
    # # timeout client          1m
    # # timeout server          1m
    # # timeout http-keep-alive 10s
    # # timeout check           10s
    # # maxconn                 3000    

    # # daemon

    mode http
    log global
    option httplog
    option  http-server-close
    option  dontlognull
    option  redispatch
    option  contstats
    retries 3
    backlog 10000
    timeout client          25s
    timeout connect          5s
    timeout server          25s
    # timeout tunnel available in ALOHA 5.5 or HAProxy 1.5-dev10 and higher
    timeout tunnel        3600s
    timeout http-keep-alive  1s
    timeout http-request    15s
    timeout queue           30s
    timeout tarpit          60s
    default-server inter 3s rise 2 fall 3
    option forwardfor    


defaults
    mode http
    timeout client		30s
    timeout server		30s
    timeout connect		30s

frontend haproxynode
    bind *:8000
    # default_backend		backend_nodes

    # # acl url_static       path_beg       -i /static /images /javascript /stylesheets
    # # acl url_static       path_end       -i .jpg .gif .png .css .js

    # # use_backend static          if url_static
    # # default_backend             app    

    acl host_ws hdr_beg(Host) -i ws.
    use_backend bk_ws if host_ws

    ## routing based on websocket protocol header
    acl hdr_connection_upgrade hdr(Connection)  -i upgrade
    acl hdr_upgrade_websocket  hdr(Upgrade)     -i websocket

    use_backend bk_ws if hdr_connection_upgrade hdr_upgrade_websocket

    default_backend bk_web    

backend bk_ws    
    
    balance roundrobin
    # http-request set-header Upgrade %[req.hdr(HttpUpgrade)];
    # http-request set-header Host %[req.hdr(Host)]    
    # http-request set-header Connection "Upgrade";

    acl hdr_connection_upgrade hdr(Connection)                 -i upgrade
    acl hdr_upgrade_websocket  hdr(Upgrade)                    -i websocket
    acl hdr_websocket_key      hdr_cnt(Sec-WebSocket-Key)      eq 1
    acl hdr_websocket_version  hdr_cnt(Sec-WebSocket-Version)  eq 1    

    http-check expect status 101

    server node0 django_channels:8000
    server node1 django_channels_1:8000
    server node2 django_channels_2:8000
    server node3 django_channels_3:8000



# https://www.haproxy.com/blog/websockets-load-balancing-with-haproxy/